{"version":3,"file":"index.cjs.js","sources":["../src/utils/config.ts","../src/utils/version.ts","../src/utils/git.ts","../src/index.ts"],"sourcesContent":["import { readFile } from \"node:fs/promises\";\r\nimport { existsSync } from \"node:fs\";\r\n\r\nconst DEFAULT_CONFIG_PATH = \"versionBump.conf.json\";\r\n\r\nexport interface ProjectConfig {\r\n  files?: Array<{ path: string; type: 'json' | 'env'; field?: string; key?: string }>;\r\n  subprojects?: Array<{ dir: string; files?: Array<{ path: string; type: 'json' | 'env'; field?: string; key?: string }> }>;\r\n  changeEnv?: boolean;\r\n  skipGitCheck?: boolean;\r\n}\r\n\r\nexport const checkForConf = async (customConfigPath?: string): Promise<ProjectConfig> => {\r\n  const configPath = customConfigPath || DEFAULT_CONFIG_PATH;\r\n  \r\n  try {\r\n    if (!existsSync(configPath)) {\r\n      console.log(`No config file found at ${configPath}, using defaults`);\r\n      return { changeEnv: false };\r\n    }\r\n    \r\n    const confData = await readFile(configPath, \"utf8\");\r\n    const conf = JSON.parse(confData);\r\n    console.log(`Loaded configuration from ${configPath}`);\r\n    return conf;\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      console.error(`Error reading config file ${configPath}:`, error.message);\r\n    } else {\r\n      console.error(`Error reading config file ${configPath}:`, error);\r\n    }\r\n    return { changeEnv: false };\r\n  }\r\n};","import fs from 'fs/promises';\r\nimport path from 'path';\r\nimport { readJsonFile, writeJsonFile } from \"./file.js\";\r\n\r\nconst DEFAULT_PACKAGE_PATH = \"package.json\";\r\n\r\nexport interface FileConfig {\r\n  path: string;\r\n  type: 'json' | 'env';\r\n  field?: string;\r\n  key?: string;\r\n}\r\n\r\nexport interface SubprojectConfig {\r\n  dir: string;\r\n  files?: FileConfig[];\r\n}\r\n\r\nexport interface ProjectConfig {\r\n  files?: FileConfig[];\r\n  subprojects?: SubprojectConfig[];\r\n  changeEnv?: boolean;\r\n  skipGitCheck?: boolean;\r\n}\r\n\r\nexport type VersionType = 'major' | 'minor' | 'patch';\r\nexport type VersionUpdates = Record<string, string>;\r\n\r\nconst getCurrentVersion = async (filePath: string): Promise<string> => {\r\n  try {\r\n    console.log(`Reading version from: ${filePath}`);\r\n    const data = await fs.readFile(filePath, 'utf8');\r\n    const packageJson = JSON.parse(data);\r\n    console.log(`Current version found: ${packageJson.version}`);\r\n    return packageJson.version;\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      console.error(`Failed to read version from ${filePath}:`, error.message);\r\n    } else {\r\n      console.error(`Failed to read version from ${filePath}:`, error);\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst updateJsonVersion = async (filePath: string, field: string, newVersion: string): Promise<boolean> => {\r\n  try {\r\n    console.log(`Updating JSON file ${filePath}, field ${field} to ${newVersion}`);\r\n    const data = await fs.readFile(filePath, 'utf8');\r\n    const json = JSON.parse(data);\r\n    json[field] = newVersion;\r\n    await fs.writeFile(filePath, JSON.stringify(json, null, 2), 'utf8');\r\n    return true;\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      console.error(`Failed to update version in ${filePath}:`, error.message);\r\n    } else {\r\n      console.error(`Failed to update version in ${filePath}:`, error);\r\n    }\r\n    return false;\r\n  }\r\n};\r\n\r\nconst updateEnvVersion = async (filePath: string, key: string, newVersion: string): Promise<boolean> => {\r\n  try {\r\n    console.log(`Updating ENV file ${filePath}, key ${key} to ${newVersion}`);\r\n    let data = await fs.readFile(filePath, 'utf8');\r\n    \r\n    // Log the current content to debug\r\n    console.log(`Current ENV content for key ${key}:`, data.match(new RegExp(`^${key}=(.*)$`, 'm')));\r\n    \r\n    const regex = new RegExp(`^${key}=.*$`, 'm');\r\n    data = data.replace(regex, `${key}=${newVersion}`);\r\n    await fs.writeFile(filePath, data, 'utf8');\r\n    return true;\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      console.error(`Failed to update version in ${filePath}:`, error.message);\r\n    } else {\r\n      console.error(`Failed to update version in ${filePath}:`, error);\r\n    }\r\n    return false;\r\n  }\r\n};\r\n\r\nconst calculateNewVersion = (currentVersion: string, versionType: VersionType): string => {\r\n  const [major, minor, patch] = currentVersion.split('.').map(Number);\r\n  \r\n  switch (versionType) {\r\n    case 'major':\r\n      return `${major + 1}.0.0`;\r\n    case 'minor':\r\n      return `${major}.${minor + 1}.0`;\r\n    case 'patch':\r\n      return `${major}.${minor}.${patch + 1}`;\r\n    default:\r\n      throw new Error(`Invalid version type: ${versionType}`);\r\n  }\r\n};\r\n\r\nconst resolvePath = (baseDir: string | undefined, filePath: string): string => {\r\n  if (!baseDir) return filePath;\r\n  return path.join(baseDir, filePath);\r\n};\r\n\r\nexport const updateAllVersions = async (\r\n  versionType: VersionType,\r\n  config: ProjectConfig,\r\n  projectsToUpdate: string[] = ['main', ...(config.subprojects?.map(p => p.dir) || [])]\r\n): Promise<VersionUpdates> => {\r\n  console.log(`Updating versions for projects: ${projectsToUpdate.join(', ')}`);\r\n  \r\n  const versionUpdates: VersionUpdates = {};\r\n  \r\n  if (projectsToUpdate.includes('main')) {\r\n    const mainPackageFile = config.files?.find(f => f.path.endsWith('package.json') && f.type === 'json');\r\n    \r\n    if (mainPackageFile) {\r\n      const mainVersion = await getCurrentVersion(mainPackageFile.path);\r\n      const newVersion = calculateNewVersion(mainVersion, versionType);\r\n      console.log(`Main project: ${mainVersion} -> ${newVersion}`);\r\n      \r\n      for (const file of config.files || []) {\r\n        if (file.type === 'json') {\r\n          await updateJsonVersion(file.path, file.field || 'version', newVersion);\r\n        } else if (file.type === 'env' && file.key) {\r\n          await updateEnvVersion(file.path, file.key, newVersion);\r\n        }\r\n      }\r\n      \r\n      versionUpdates.main = newVersion;\r\n      console.log(`Updated main project version to ${newVersion}`);\r\n    }\r\n  }\r\n  \r\n  if (config.subprojects) {\r\n    for (const subproject of config.subprojects) {\r\n      if (projectsToUpdate.includes(subproject.dir)) {\r\n        const subPackageFile = subproject.files?.find(f => f.path.endsWith('package.json') && f.type === 'json');\r\n        \r\n        if (subPackageFile) {\r\n          const fullPath = path.join(subproject.dir, subPackageFile.path);\r\n          const currentVersion = await getCurrentVersion(fullPath);\r\n          const newVersion = calculateNewVersion(currentVersion, versionType);\r\n          console.log(`${subproject.dir} project: ${currentVersion} -> ${newVersion}`);\r\n          \r\n          for (const file of subproject.files || []) {\r\n            const filePath = path.join(subproject.dir, file.path);\r\n            if (file.type === 'json') {\r\n              await updateJsonVersion(filePath, file.field || 'version', newVersion);\r\n            } else if (file.type === 'env' && file.key) {\r\n              console.log(`Attempting to update ENV file: ${filePath} with key: ${file.key}`);\r\n              await updateEnvVersion(filePath, file.key, newVersion);\r\n            }\r\n          }\r\n          \r\n          versionUpdates[subproject.dir] = newVersion;\r\n          console.log(`Updated ${subproject.dir} project version to ${newVersion}`);\r\n        } else {\r\n          console.warn(`No package.json found for subproject: ${subproject.dir}`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  return versionUpdates;\r\n};\r\n\r\nexport const updatePackageVersion = async (\r\n  versionType: VersionType,\r\n  packagePath: string = DEFAULT_PACKAGE_PATH,\r\n  customVersion: string | null = null\r\n): Promise<string> => {\r\n  if (customVersion) {\r\n    const packageJson = await readJsonFile(packagePath);\r\n    console.log(`Updating version ${packageJson.version} -> ${customVersion} in ${packagePath}`);\r\n    packageJson.version = customVersion;\r\n    await writeJsonFile(packagePath, packageJson);\r\n    return customVersion;\r\n  } else {\r\n    const packageJson = await readJsonFile(packagePath);\r\n    const currentVersion = packageJson.version;\r\n    const newVersion = calculateNewVersion(currentVersion, versionType);\r\n    console.log(`Updating version ${currentVersion} -> ${newVersion} in ${packagePath}`);\r\n    packageJson.version = newVersion;\r\n    await writeJsonFile(packagePath, packageJson);\r\n    return newVersion;\r\n  }\r\n};\r\n\r\nexport const updateEnv = async (\r\n  newVersion: string,\r\n  envPath: string,\r\n  envVersionValue: string\r\n): Promise<boolean> => {\r\n  return updateEnvVersion(envPath, envVersionValue, newVersion);\r\n};","import simpleGit from 'simple-git';\r\n\r\nexport const pushToGit = async (\r\n  versionUpdates: Record<string, string>,\r\n  commitMessage: string\r\n): Promise<void> => {\r\n  try {\r\n    const git = simpleGit();\r\n    const status = await git.status();\r\n    if (status.files.length === 0) {\r\n      console.log('No changes to commit.');\r\n      return;\r\n    }\r\n    const versionInfo = Object.entries(versionUpdates)\r\n      .map(([project, version]) => `${project}: v${version}`)\r\n      .join(', ');\r\n    const fullCommitMessage = `${commitMessage} [${versionInfo}]`;\r\n    await git.add('.');\r\n    await git.commit(fullCommitMessage);\r\n    await git.push();\r\n    console.log(`Changes committed and pushed to Git: ${fullCommitMessage}`);\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      console.error('Error pushing to Git:', error.message);\r\n    } else {\r\n      console.error('Error pushing to Git:', error);\r\n    }\r\n    throw error;\r\n  }\r\n};","#!/usr/bin/env node\nimport inquirer from \"inquirer\";\nimport { checkForConf } from \"./utils/config.js\";\nimport { updateAllVersions, VersionType } from \"./utils/version.js\";\nimport { pushToGit } from \"./utils/git.js\";\n\nconst VALID_VERSION_TYPES: VersionType[] = [\"major\", \"minor\", \"patch\"];\n\ninterface ParsedArgs {\n  configPath: string | null;\n  projects: string[];\n}\n\nconst parseArgs = (): ParsedArgs => {\n  const args = process.argv.slice(2);\n  const config: ParsedArgs = {\n    configPath: null,\n    projects: []\n  };\n\n  for (let i = 0; i < args.length; i++) {\n    if (args[i] === \"--config\" || args[i] === \"-c\") {\n      config.configPath = args[i + 1];\n      i++;\n    } else if (args[i] === \"--project\" || args[i] === \"-p\") {\n      config.projects.push(args[i + 1]);\n      i++;\n    }\n  }\n\n  return config;\n};\n\nconst main = async (): Promise<void> => {\n  const { configPath, projects } = parseArgs();\n  const conf = await checkForConf(configPath ?? undefined);\n\n  const availableProjects = [\"main\", ...(conf.subprojects || []).map(p => p.dir)];\n  \n  const answers = await inquirer.prompt([\n    {\n      type: \"list\",\n      name: \"versionType\",\n      message: \"What type of change?\",\n      choices: VALID_VERSION_TYPES,\n    },\n    {\n      type: \"checkbox\",\n      name: \"selectedProjects\",\n      message: \"Which projects to update?\",\n      choices: availableProjects,\n      default: projects.length ? projects : availableProjects,\n      when: () => !projects.length && conf.subprojects && conf.subprojects.length > 0\n    },\n    {\n      type: \"input\",\n      name: \"commitMessage\",\n      message: \"Enter the commit message:\",\n    },\n    {\n      type: \"confirm\",\n      name: \"updateEnv\",\n      message: \"Do you want to update the .env file?\",\n      default: false,\n      when: () => conf.changeEnv === undefined && !conf.files,\n    },\n  ]);\n\n  const { versionType, commitMessage } = answers as { versionType: VersionType; commitMessage: string };\n  \n  const workingConfig = { ...conf };\n  if (conf.changeEnv === undefined && !conf.files) {\n    workingConfig.changeEnv = answers.updateEnv;\n  }\n  \n  const projectsToUpdate: string[] = projects.length ? projects : answers.selectedProjects || availableProjects;\n\n  const newVersions = await updateAllVersions(versionType, workingConfig, projectsToUpdate);\n\n  if (!conf.skipGitCheck) {\n    await pushToGit(newVersions, commitMessage);\n  }\n};\n\nmain().catch((error: unknown) => {\n  if (error instanceof Error) {\n    console.error(\"Error in main execution:\", error.message);\n  } else {\n    console.error(\"Error in main execution:\", error);\n  }\n  process.exit(1);\n});"],"names":["existsSync","readFile"],"mappings":"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"}